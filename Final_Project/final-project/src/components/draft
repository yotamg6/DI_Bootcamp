from searchresults
//   //   const [matchIndexes, setMatchIndexes] = useState([]);
  //   useEffect(async () => {
  //     try {
  //       const response = await fetch("http://localhost:5000/api/breeds");
  //       const data = await response.json();
  //       console.log("data in usefect:", data);
  //       await setBreeds(data);
  //     } catch (e) {
  //       throw new Error(e);
  //     }
  //   }, []);

  //   //   console.log(
  //   //     "height:",
  //   //     height,
  //   //     "weight:",
  //   //     weight,
  //   //     "temper:",
  //   //     temper,
  //   //     "allbreeds:",
  //   //     breeds
  //   //   );
  //   const calcFilters = () => {
  //     console.log("filters", breeds);
  //     if (breeds.length > 0) {
  //       //   let foundMatchIndex = [];
  //       const arrOfTemperIndexes = [];
  //       const arrOfHeightIndexes = [];
  //       const arrOfWeightIndexes = [];

  //       const heightMatch = breeds.filter((breed, i) => {
  //         if (breed.height) {
  //           const breedHeight = breed.height.metric
  //             .replaceAll(" ", "")
  //             .split("-");
  //           if (height < breedHeight[1] && height > breedHeight[0])
  //             arrOfHeightIndexes.push(i);
  //         }
  //       });
  //       const weightMatch = breeds.filter((breed, i) => {
  //         if (breed.weight) {
  //           const breedWeight = breed.weight.metric
  //             .replaceAll(" ", "")
  //             .split("-");

  //           if (weight < breedWeight[1] && weight > breedWeight[0])
  //             arrOfWeightIndexes.push(i);
  //         }
  //       });
  //       const weightnHeightMatches = arrOfHeightIndexes.filter((height) =>
  //         arrOfWeightIndexes.includes(height)
  //       );
  //       console.log("weightnheight:", weightnHeightMatches);
  //       const userTemperArr = temper
  //         .replaceAll(",", "")
  //         .replaceAll("  ", " ")
  //         .toLowerCase()
  //         .split(" ");
  //       const allTemps = breeds.map((breed) => {
  //         if (breed.temperament) {
  //           return breed.temperament.replaceAll(" ", "").toLowerCase().split(",");
  //         }
  //       });
  //       const userTemperLength = userTemperArr.length;
  //       const matchTemp = allTemps.filter((breedTempArr, i) => {
  //         if (breedTempArr) {
  //           const x =
  //             breedTempArr.filter((temp) => {
  //               return userTemperArr.includes(temp);
  //             }).length === userTemperLength;
  //           if (x) arrOfTemperIndexes.push(i);
  //         }
  //       });
  //       if (arrOfTemperIndexes.length > 0 && weightnHeightMatches.length > 0) {
  //         const foundMatchIndexes = arrOfTemperIndexes.filter(
  //           (tempInd) => weightnHeightMatches.includes(tempInd)
  //           // foundMatchIndex.push(foundMatch)
  //         );
  //         if (foundMatchIndexes) {
  //           console.log("all filters:", foundMatchIndexes);
  //           setMatchIndexes(foundMatchIndexes);
  //         }
  //       }
  //     }
  //   };

  from tempSearch
  // import React from "react";
// import SizeSearch from "./SizeSearch";

// class TempSearch extends React.Component {
//   constructor() {
//     super();
//     this.state = {
//       breedsArr: [],
//       selectedDog: {},
//     };
//   }

//   handleChange = (e) => {
//     const breeds = this.state.breedsArr;
//     const selected = breeds.find((breed) => breed.id == e.target.value);
//     this.setState({ selectedDog: selected }); //now render the result if Object.value(selectedDog).length>0. did it in the movie ithink
//   };

//   componentDidMount() {
//     fetch("https://api.TheDogAPI.com/v1/breeds", {
//       headers: {
//         "x-api-key": "17d937a1-c776-46bc-9dda-dc68574fbe31",
//       },
//     })
//       .then((res) => res.json())
//       //   .then((data) => console.log(data))
//       .then((data) => {
//         this.setState({ breedsArr: [...data] });
//       })
//       .catch((e) => console.log("fetch err:", e));
//   }

//   render() {
//     const selected = this.state.selectedDog;
//     // console.log(selected);
//     const breedsArr = JSON.parse(JSON.stringify(this.state.breedsArr));
//     // console.log(breedsArr);

//     return (
//       <>
//         {breedsArr.length > 1 ? (
//           <select onChange={this.handleChange}>
//             <option value="-1">Select temperament</option>
//             {breedsArr.map((breed, i) => {
//               if (breed.temperament) {
//                 const temperament = breed.temperament;

//                 const tempeArr = temperament.split(",").slice(0, 3);
//                 const tempeStringed = tempeArr.join(", ");

//                 return (
//                   <option key={i} value={breed.id}>
//                     {tempeStringed}
//                   </option>
//                 );
//               }
//             })}
//           </select>
//         ) : (
//           <div></div>
//         )}
//         <SizeSearch breeds={this.state.breedsArr} />
//         {Object.keys(selected).length > 0 ? (
//           <img src={selected.image.url}></img>
//         ) : null}
//       </>
//     );
//   }
// }

// export default TempSearch;

from SizeSearch
// import React from "react";
// class SizeSearch extends React.Component {
//   constructor() {
//     super();
//     this.state = {
//       heightTxt: "",
//       weightTxt: "",
//       tempeTxt: "",
//       height: "",
//       weight: "",
//       temperament: "",
//       matchIndexes: [],
//     };
//   }
//   handleChange = (e) => {
//     this.setState({ [e.target.name]: e.target.value });
//   };
//   handleClick = () => {};
//   render() {
//     const breeds = JSON.parse(JSON.stringify(this.props.breeds));
//     const { height, weight, temperament, matchIndexes } = this.state;
//     let foundMatchIndex = [];
//     const arrOfTemperIndexes = [];
//     const arrOfHeightIndexes = [];
//     const arrOfWeightIndexes = [];

//     if (breeds.length > 0) {
//       const heightMatch = breeds.filter((breed, i) => {
//         if (breed.height) {
//           const breedHeight = breed.height.metric
//             .replaceAll(" ", "")
//             .split("-");
//           if (height < breedHeight[1] && height > breedHeight[0])
//             arrOfHeightIndexes.push(i);
//         }
//       });

//       const weightMatch = breeds.filter((breed, i) => {
//         if (breed.weight) {
//           const breedWeight = breed.weight.metric
//             .replaceAll(" ", "")
//             .split("-");

//           if (weight < breedWeight[1] && weight > breedWeight[0])
//             arrOfWeightIndexes.push(i);
//         }
//       });

//       const weightnHeightMatches = arrOfHeightIndexes.filter((height) =>
//         arrOfWeightIndexes.includes(height)
//       );
//       const tempArr = temperament
//         .replaceAll(",", "")
//         .replaceAll("  ", " ")
//         .toLowerCase()
//         .split(" ");
//       const allTemps = breeds.map((breed) => {
//         if (breed.temperament) {
//           return breed.temperament.replaceAll(" ", "").toLowerCase().split(",");
//         }
//       });
//       const matchTemp = allTemps.filter((breedTempArr, i) => {
//         if (breedTempArr) {
//           const x =
//             breedTempArr.filter((temp) => {
//               return tempArr.includes(temp);
//             }).length === tempArr.length;
//           if (x) arrOfTemperIndexes.push(i);
//         }
//       });
//       foundMatchIndex = arrOfTemperIndexes.find((tempInd) =>
//         weightnHeightMatches.includes(tempInd)
//       );
//     }

//     return (
//       <>
//         <div>
//           <input
//             name="tempeTxt"
//             type="text"
//             placeholder="Desired temperament"
//             onChange={this.handleChange}
//           ></input>
//           <input
//             name="heightTxt"
//             type="text"
//             placeholder="Desired height"
//             onChange={this.handleChange}
//           ></input>
//           <input
//             name="weightTxt"
//             type="text"
//             placeholder="Desired weight"
//             onChange={this.handleChange}
//           ></input>
//           <button
//             onClick={() =>
//               this.setState({
//                 weight: this.state.weightTxt,
//                 height: this.state.heightTxt,
//                 temperament: this.state.tempeTxt,
//               })
//             }
//           >
//             Get a match!
//           </button>
//         </div>
//         {foundMatchIndex && foundMatchIndex.length > 0
//           ? foundMatchIndex.map((index) => {
//               return <div key={index}>{breeds[index]}</div>;
//             })
//           : null}
//       </>
//     );
//   }
// }

// export default SizeSearch;

// // const filteredCombinations = arrayOfArrays.filter((item, i) => {
// //   const x =
// //     item.filter((x) => {
// //       return arrayToCheck.includes(x);
// //     }).length === arrayToCheck.length;
// //   if (x) console.log(i);
// // });

from btnSubmit
// import React, { useState, useEffect, useContext } from "react";
// import { AppContext } from "../App";
// import { useNavigate } from "react-router-dom";

// const BtnSubmit = (props) => {
//   //   console.log(props.filterMatches);
//   let navigate = useNavigate();
//   const {
//     heightText,
//     weightText,
//     temperText,
//     setHeight,
//     setWeight,
//     setTemper,
//     matchIndexes,
//   } = useContext(AppContext);
//   const handleClick = () => {
//     setHeight(heightText);
//     setWeight(weightText);
//     setTemper(temperText);
//     props.filterMatches();
//     navigate("/search-results");
//     //should I add async-await here? it doesnt always get everything on the first time
//   };
//   return (
//     <>
//       <button onClick={handleClick}>Find your breed</button>
//     </>
//   );
// };

// export default BtnSubmit;

// -- SELECT f.username, f.selecteduser, u.filename
// -- from uploads u, favs f
// -- where f.selecteduser = u.username
// -- and f.username='yot'

// -- SELECT filename from uploads where username in (
// -- 	SELECT selecteduser from favs where username='yot'
// -- )

// Uploads.hasMany(Favs, {
//     foreignKey: {
//       name: 'username'
//     }
//   });
//   Favs.belongsTo(Uploads, {
//     foreignKey: {
//       name: 'username'
//     }
//   });

from controllers/users

// export const addToFavs = async (req, res) => {
//   console.log("selected user in addtofavs backend:", req.body.selectedUser);
//   console.log("username in addtofavs backend:", req.body.userName);
//   try {
//     await Favs.create({
//       username: req.body.userName,
//       selecteduser: req.body.selectedUser,
//       where: {
//         filename: {
//           [Op.ne]: req.body.fileName,
//         },
//       },
//     }),
//       res.json({ msg: "image added to favorites" });
//   } catch (e) {
//     console.log("error from addtofavs:", e);
//     res.json({ msg: "failed to add image" });
//   }

from routes/index
// router.post("/api/images", async (req, res) => {
//   const images = await Uploads.findAll({
//     where: {
//       filetype: "image/jpeg",
//       username: !req.body.userName,
//     },
//   });
//   res.json(images);
// });

// router.get("/api/images", async (req, res) => {
//   const images = await Uploads.findAll({
//     where: {
//       filetype: "image/jpeg",
//     },
//   });
//   res.json(images);
//   //in the request I'll send the username. add "where" username!userName
// });

from router/index
//move to the controllers and/or change the fetch
// router.get("/api/breeds", (req, res) => {
//   GetAllBreeds()
//     .then((result) => res.json(result))
//     .catch((e) => console.log("error from router get", e));
// });

from GetAllBreeds// const GetAllBreeds = async () => {
//   try {
//     const response = await axios.request({
//       url: "https://api.TheDogAPI.com/v1/breeds",
//       method: "GET",
//       headers: {
//         "x-api-key": "17d937a1-c776-46bc-9dda-dc68574fbe31",
//       },
//     });
//     return response.data;
//   } catch (error) {
//     throw new Error(error);
//   }
// };
// export default GetAllBreeds;

from TemperSearch (version where user types in)
return (
    <>
      <div>
        <input
          name="temperText"
          type="text"
          placeholder="Desired temperament"
          onChange={(e) => setTemper(e.target.value)}
        ></input>
      </div>
    </>
  );

  from searchFields (version where user types in) 
  const userTemperArr = temper
        .replaceAll(",", "")
        .replaceAll("  ", " ")
        .toLowerCase()
        .split(" ");
      const allTemps = breeds.map((breed) => {
        if (breed.temperament) {
          return breed.temperament.replaceAll(" ", "").toLowerCase().split(",");
        }
      });

      const userTemperLength = userTemperArr.length;
      const matchTemp = allTemps.filter((breedTempArr, i) => {
        if (breedTempArr) {
          const x =
            breedTempArr.filter((temp) => {
              return userTemperArr.includes(temp);
            }).length === userTemperLength;
          if (x) arrOfTemperIndexes.push(i);
        }
      });

      //from about my dog
       // useEffect(async () => {
  //   setAboutTextArea("");
  //   try {
  //     const response = await fetch("http://localhost:5000/api/breeds");
  //     const data = await response.json();
  //     // console.log("data in usefect:", data);
  //     await setBreeds(data);
  //   } catch (e) {
  //     throw new Error(e);
  //   }
  // }, []);

//from HeightSearch (when user types in heights)
          <input
          name="heightTxt"
          type="text"
          placeholder="Desired height"
          onChange={(e) => setHeight(e.target.value)}
        ></input>

     //from weightSearch (when user types in heights)
         <input
          name="weightTxt"
          type="text"
          placeholder="Desired weight"
          onChange={(e) => setWeight(e.target.value)}
        ></input>

        //from searchFields
              // console.log("temper inside filters", temper);

      // const arrOfTemperIndexes = [];
      const arrOfHeightIndexes = [];
      const arrOfWeightIndexes = [];

      const heightMatch = breeds.filter((breed, i) => {
        if (breed.height) {
          const breedHeight = breed.height.metric
            .replaceAll(" ", "")
            .split("-");
          if (height <= breedHeight[1] && height >= breedHeight[0])
            arrOfHeightIndexes.push(i);
        }
      });
      const weightMatch = breeds.filter((breed, i) => {
        if (breed.weight) {
          const breedWeight = breed.weight.metric
            .replaceAll(" ", "")
            .split("-");

          if (weight <= breedWeight[1] && weight >= breedWeight[0])
            arrOfWeightIndexes.push(i);
        }
      });

      //from temperSearch
      // const arr = [];
// //array of arrays=> loop through and get two tempers of each array. every two should be unique.
// for (let i = 0; i < tempers.length; i++) {
//   // for (let z=i; z<4; z++) {
//   // const fourElemArr = tempers[i].slice(0,4)
//   const filteredUnique = tempers[i].filter((elem) => {
//     !tempers[i + 1].includes(elem);
//     arr.push(filteredUnique);
//   });

//   filter((temp, index) => {
//     tempers[i + 1].includes(temp);
//   });
// }

// console.log("alltemps", allTemps);
// const plusOne = allTemps[i + 1];
// console.log("plusone", plusOne);

// for (let i = 0; i < breedTemperLength - 1; i++) {
//   if (allTemps[i]) {
//     for (let z = i + 1; z < breedTemperLength - 1; z++) {
//       if (allTemps[z]) {
//         const filteredUnique = allTemps[i].filter((elem) => {
//           return !allTemps[z].includes(elem);
//         });
//         arr.push(filteredUnique);
//       }
//     }
//   }
// }

// const flatTemps = allTemps.flat();
//       // const unique = new Set(flatTemps);
//       // console.log("unique", unique);

////////////////////////////////////////////////////
// const arr = [];
//       const breedTemperLength = allTemps.length;
//       const arrLen = arr.length;
// for (let i = 0; i < breedTemperLength - 1; i++) {
//   if (allTemps[i] && allTemps[i + 1]) {
//     const filteredUnique = allTemps[i].filter((elem) => {
//       return !allTemps[i + 1].includes(elem);
//     });
//     // console.log(filteredUnique);
//     // if (arrLen > 0) {
//     console.log("test");
//     const compared = arr.map((nested) => {
//       if (nested) {
//         const x = filteredUnique.filter((elem) => {
//           return !nested.includes(elem);
//         });
//       }
//       arr.push(filteredUnique);
//       console.log(compared);
//     });
//     // } else arr.push(filteredUnique);
//   }
// }

// //
// // console.log("arrOfArrUnique?", arr);
//I think I'm close. small adjustments and it's there. if there's time...
///////////////////////////////////////////////////////////////


